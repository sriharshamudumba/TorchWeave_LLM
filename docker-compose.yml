services:
  server:
    build: 
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - HF_MODEL=${HF_MODEL:-TinyLlama/TinyLlama-1.1B-Chat-v1.0}
      - MAX_NEW_TOKENS=${MAX_NEW_TOKENS:-128}
      - TEMPERATURE=${TEMPERATURE:-0.7}
      - TOP_K=${TOP_K:-50}
      - TOP_P=${TOP_P:-0.9}
      - SEED=${SEED:-42}
      - SCHEDULE_TICK_MS=${SCHEDULE_TICK_MS:-15}
      - MAX_BATCH=${MAX_BATCH:-16}
      - ARTIFACT_DIR=/artifacts
      - ARTIFACT_MODEL_DIR=/artifacts/model
    volumes:
      - artifacts:/artifacts
      - ./logs:/app/logs
    depends_on:
      optimizer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - gpu

  server-cpu:
    build: 
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - HF_MODEL=${HF_MODEL:-TinyLlama/TinyLlama-1.1B-Chat-v1.0}
      - MAX_NEW_TOKENS=${MAX_NEW_TOKENS:-128}
      - TEMPERATURE=${TEMPERATURE:-0.7}
      - TOP_K=${TOP_K:-50}
      - TOP_P=${TOP_P:-0.9}
      - SEED=${SEED:-42}
      - SCHEDULE_TICK_MS=${SCHEDULE_TICK_MS:-15}
      - MAX_BATCH=${MAX_BATCH:-16}
      - ARTIFACT_DIR=/artifacts
      - ARTIFACT_MODEL_DIR=/artifacts/model
    volumes:
      - artifacts:/artifacts
      - ./logs:/app/logs
    depends_on:
      optimizer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  optimizer:
    build: 
      context: ./optimizer
      dockerfile: Dockerfile
    environment:
      - HF_MODEL=${HF_MODEL:-TinyLlama/TinyLlama-1.1B-Chat-v1.0}
      - ARTIFACT_DIR=/artifacts
      - ARTIFACT_MODEL_DIR=/artifacts/model
    volumes:
      - artifacts:/artifacts

  # Enhanced UI service using your existing ui directory
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    ports:
      - "3000:80"  # Back to port 3000
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    depends_on:
      - server-cpu
    profiles:
      - ui

  # Model management service
  model-manager:
    build:
      context: ./model-manager
      dockerfile: Dockerfile
    environment:
      - ARTIFACT_DIR=/artifacts
      - ARTIFACT_MODEL_DIR=/artifacts/model
    volumes:
      - artifacts:/artifacts
    profiles:
      - manager

  # Enhanced monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    profiles:
      - monitoring

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    profiles:
      - cache

volumes:
  artifacts:
  grafana-data:
  redis-data:
